' Set up the window
GraphicsWindow.Title = "Catch the Falling Objects"
GraphicsWindow.Width = 1200
GraphicsWindow.Height = 900

' Set the brush color for the player (a blue square)
GraphicsWindow.BrushColor = "Blue"
player = Shapes.AddRectangle(50, 50)
playerInitialX = (GraphicsWindow.Width - 50) / 2
Shapes.Move(player, playerInitialX, GraphicsWindow.Height - 60)

' Set the brush color for the falling objects (red circles)
GraphicsWindow.BrushColor = "Red"

' Initialize ball arrays
ballCount = 15

InitializeBalls()

' Initialize score
score = 0
GraphicsWindow.BrushColor = "Black"
scoreText = Shapes.AddText("Score: 0")
Shapes.Move(scoreText, 10, 10)

' Start the game loop using a timer
Timer.Interval = 50  ' Timer ticks every 50 milliseconds
Timer.Tick = OnTick

' Listen for keyboard events to move the player
GraphicsWindow.KeyDown = OnKeyDown

paused = "False"

' Increase ball speed every 10 points
If score Mod 10 = 0 And score > 0 Then
  For i = 1 To ballCount
    ballSpeed[i] = ballSpeed[i] + 1  ' Increase speed for all balls
  EndFor
EndIf

' Play sound when the player scores
If ballY[i] > GraphicsWindow.Height Then
  score = score + 1
  Shapes.SetText(scoreText, "Score: " + score)
  Sound.PlayBellRing()
EndIf

' Play sound on collision
If (ballX[i] + 30 > playerX) And (ballX[i] < playerX + 50) And (ballY[i] + 30 > playerY) And (ballY[i] < playerY + 50) Then
  Sound.PlayChime()
  Timer.Pause()
  GraphicsWindow.ShowMessage("Collision Detected! Game Over. Final Score: " + score, "Game Over")
  Program.End()
EndIf

' Game loop: updates the falling objects and checks for collisions
Sub OnTick
  MoveBalls()
EndSub

' Function to initialize the balls
Sub InitializeBalls
  For i = 1 To ballCount
    balls[i] = Shapes.AddEllipse(30, 30)
    ballX[i] = Math.GetRandomNumber(GraphicsWindow.Width - 30) - 10
    ballY[i] = 0
    ballSpeed[i] = Math.GetRandomNumber(5) + 2  ' Random speed between 2 and 6
    Shapes.Move(balls[i], ballX[i], ballY[i])
  EndFor
EndSub

' Function to move the balls and check for collisions
Sub MoveBalls
  For i = 1 To ballCount
    ' Update the ball's position with its unique speed
    ballY[i] = ballY[i] + ballSpeed[i]
    Shapes.Move(balls[i], ballX[i], ballY[i])

    ' Reset the ball to the top if it goes off-screen
    If ballY[i] > GraphicsWindow.Height Then
      ballX[i] = Math.GetRandomNumber(GraphicsWindow.Width - 30) - 1
      ballY[i] = 0
      ballSpeed[i] = Math.GetRandomNumber(13) + 5  ' Assign a new random speed
      Shapes.Move(balls[i], ballX[i], ballY[i])

      ' Increment the score for successfully avoiding the ball
      score = score + 1
      Shapes.SetText(scoreText, "Score: " + score)
    EndIf

    ' Get the current position of the player
    playerX = Shapes.GetLeft(player)
    playerY = Shapes.GetTop(player)

    ' Check for collision between the ball and the player
    If (ballX[i] + 30 > playerX) And (ballX[i] < playerX + 50) And (ballY[i] + 30 > playerY) And (ballY[i] < playerY + 50) Then
      Timer.Pause()
      GraphicsWindow.ShowMessage("Collision Detected! Game Over. Final Score: " + score, "Game Over")
      Program.End()
    EndIf
  EndFor
EndSub

' Handle player movement with the Left and Right arrow keys
Sub OnKeyDown
  key = GraphicsWindow.LastKey
  playerX = Shapes.GetLeft(player)
  moveStep = 10

  ' Handle pause/resume
  If key = "P" Then
    If paused = "False" Then
      Timer.Pause()
      paused = "True"
    Else
      Timer.Resume()
      paused = "False"
    EndIf
  EndIf

  ' Handle player movement
  If key = "Left" Then
    playerX = Math.Max(0, playerX - moveStep)
  ElseIf key = "Right" Then
    playerX = Math.Min(GraphicsWindow.Width - 50, playerX + moveStep)
  EndIf
  Shapes.Move(player, playerX, GraphicsWindow.Height - 60)
EndSub