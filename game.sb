' Set up the window
GraphicsWindow.Title = "Catch the Falling Objects"
GraphicsWindow.Width = 800
GraphicsWindow.Height = 600

' Set the brush color for the player (a blue square)
GraphicsWindow.BrushColor = "Blue"
player = Shapes.AddRectangle(50, 50)
playerInitialX = (GraphicsWindow.Width - 50) / 2
Shapes.Move(player, playerInitialX, GraphicsWindow.Height - 60)

' Set the brush color for the falling objects (red circles)
GraphicsWindow.BrushColor = "Red"

' Initialize ball arrays
ballCount = 5
currentBallCount = 0  ' Track the number of balls currently spawned

InitializeBall()

' Define the falling speed
fallSpeed = 5

' Initialize score
score = 0
GraphicsWindow.BrushColor = "Black"
scoreText = Shapes.AddText("Score: 0")
Shapes.Move(scoreText, 10, 10)

' Start the game loop using a timer
Timer.Interval = 50  ' Timer ticks every 50 milliseconds
Timer.Tick = OnTick

' Listen for keyboard events to move the player
GraphicsWindow.KeyDown = OnKeyDown

' Function to initialize a single ball
Sub InitializeBall
  If currentBallCount < ballCount Then
    currentBallCount = currentBallCount + 1
    balls[currentBallCount] = Shapes.AddEllipse(30, 30)
    ballX[currentBallCount] = Math.GetRandomNumber(GraphicsWindow.Width - 30) - 1
    ballY[currentBallCount] = 0
    Shapes.Move(balls[currentBallCount], ballX[currentBallCount], ballY[currentBallCount])
  EndIf
EndSub

' Function to reset all balls (optional cleanup)
Sub ResetBalls
  For i = 1 To currentBallCount
    Shapes.Remove(balls[i])  ' Remove the ball from the screen
  EndFor
  currentBallCount = 0  ' Reset the ball count
EndSub

' Game loop: updates the falling objects and checks for collisions
Sub OnTick
  MoveBalls()
  ' Spawn a new ball every few ticks (e.g., every 200 milliseconds)
  If Math.Remainder(Timer.Interval * Timer.TickCount, 200) = 0 Then
    InitializeBall()
  EndIf
EndSub

' Function to move the balls and check for collisions
Sub MoveBalls
  For i = 1 To ballCount
    ' Update the ball's position
    ballY[i] = ballY[i] + fallSpeed
    Shapes.Move(balls[i], ballX[i], ballY[i])

    ' Reset the ball to the top if it goes off-screen
    If ballY[i] > GraphicsWindow.Height Then
      ballX[i] = Math.GetRandomNumber(GraphicsWindow.Width - 30) - 1
      ballY[i] = 0
      Shapes.Move(balls[i], ballX[i], ballY[i])

      ' Increment the score for successfully avoiding the ball
      score = score + 1
      Shapes.SetText(scoreText, "Score: " + score)
    EndIf

    ' Get the current position of the player
    playerX = Shapes.GetLeft(player)
    playerY = Shapes.GetTop(player)

    ' Check for collision between the ball and the player
    If (ballX[i] + 30 >= playerX) And (ballX[i] <= playerX + 50) And (ballY[i] + 30 >= playerY) And (ballY[i] <= playerY + 50) Then
      Timer.Pause()
      GraphicsWindow.ShowMessage("Collision Detected! Game Over. Final Score: " + score, "Game Over")
      Program.End()
    EndIf
  EndFor
EndSub

' Handle player movement with the Left and Right arrow keys
Sub OnKeyDown
  key = GraphicsWindow.LastKey
  playerX = Shapes.GetLeft(player)
  moveStep = 10
  If key = "Left" Then
    playerX = Math.Max(0, playerX - moveStep)
  ElseIf key = "Right" Then
    playerX = Math.Min(GraphicsWindow.Width - 50, playerX + moveStep)
  EndIf
  Shapes.Move(player, playerX, GraphicsWindow.Height - 60)
EndSub